
""" 1729 = 1^3 + 12^3 = 9^3 + 10^3.

Напишите программу, которая находит аналогичные интересные числа. В ответе
запишите первые 5 чисел в порядке возрастания, включая число 1729.

Примечание. Используйте вложенный цикл."""

# n = int(input())

# counter = 0
# n = 1739
# while counter < 6:
#     n += 1
#     for i in range(1, n):
#         b = i ** (1 / 3)
#         a = (n - i) ** (1 / 3)
#         if a % 1 == 0 and b % 1 == 0:
#             print(a, b, n)
#             counter += 1

# count = 0
# n = 1728
# # m = int(n ** (1 / 3))
# for count in range(50000):
#     x = y = 0
#     flag = False
#     for i in range(1, 35):
#         if flag is True:
#             break
#         a = i ** 3
#         for j in range(1, 35):
#             b = j ** 3
#             if a + b == n:
#                 if x == 0:
#                     x, y = i, j
#                 elif x != i and x != j:
#                     print(i, j, (i ** 3 + j ** 3))
#                     print(x, y, (x ** 3 + y ** 3))
#                     flag = True
#                 count += 1
#     n += 1

# for a in range(1, 33):
#     for c in range(1, a):
#         for d in range(1, c):
#             for b in range(1, d):
#                 if a ** 3 + b ** 3 == c ** 3 + d ** 3:
#                     print(a**3 + b**3)


"""Красный, синий и желтый называются основными цветами, потому что их нельзя
получить путем смешения других цветов. При смешивании двух основных цветов
получается вторичный цвет:
если смешать красный и синий, то получится фиолетовый;
если смешать красный и желтый, то получится оранжевый;
если смешать синий и желтый, то получится зеленый.
если смешать желтый и желтый, то получится желтый и т.д.
Напишите программу, которая считывает названия двух основных цветов для
смешивания. Если пользователь вводит что-нибудь помимо названий «красный»,
«синий» или «желтый», то программа должна вывести сообщение об ошибке.
В противном случае программа должна вывести название вторичного цвета, который
получится в результате.

orig_col = ['желтый', 'красный', 'синий']
fin_col = {1: 'оранжевый', 2: 'зеленый', 3: 'фиолетовый'}
inp_col = [input(), input()]

if inp_col[0] not in orig_col or inp_col[1] not in orig_col:
    print('ошибка цвета')
elif inp_col[0] == inp_col[1] and inp_col[0] in orig_col:
    print(inp_col[0])
else:
    print(fin_col[orig_col.index(inp_col[0]) + orig_col.index(inp_col[1])])"""

# ----------------------------------------------------------------------------


"""На колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета
карманов:

карман 0 зеленый;
для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы с
четным номером – черный;
для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы с
четным номером – красный;
для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы
с четным номером – черный;
для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы с
четным номером – красный.
Напишите программу, которая считывает номер кармана и показывает, является ли
этот карман зеленым, красным или черным. Программа должна вывести сообщение об
ошибке, если пользователь вводит число, которое лежит вне диапазона от 0 до 36.

x = pocket_number = int(input())

if 0 > x or x > 36:
    print('ошибка ввода')
elif x == 0:
    print('зеленый')
elif (x < 11 or 18 < x < 29) + (x % 2) == 1:
    print("черный")
else:
    print('красный')"""

#  _____________________________________________________________________________


"""На числовой прямой даны два отрезка: [a; b] и [c; d]
Напишите программу, которая находит их пересечение.

Пересечением двух отрезков может быть:
отрезок;
точка;
пустое множество.

Формат входных данных
На вход программе подаются 4 целых числа a, b, c, d, каждое на
отдельной строке. Гарантируется, что a < b и c < d

Формат выходных данных:
Программа должна вывести на экран границы отрезка, являющегося пересечением,
либо общую точку, либо текст «пустое множество»."""

#  soltion 1

a, b, c, d = int(input()), int(input()), int(input()), int(input())

if b < c or d < a:
    print("пустое множество")
elif a <= c and b <= d:
    if c < b:
        print(c, b)
    elif c == b:
        print(c)
elif a >= c and b >= d:
    if a < d:
        print(a, d)
    elif a == d:
        print(a)
elif a > c and b < d:
    print(a, b)
else:
    print(c, d)

#  soltion 2

a, b, c, d = int(input()), int(input()), int(input()), int(input())
if min(b, d) < max(a, c):
    print("пустое множество")
elif min(b, d) == max(a, c):
    print(max(a, c))
else:
    print(max(a, c), min(b, d))

#  'Anonymous Pro', Consolas, monospace
# 'Fira code', 'JetBrains mono', 'Anonymous Pro', Consolas, 'DejaVu Sans',
# 'Courier New', monospace

#  _____________________________________________________________________________


'''Назовем число интересным, если в нем разность максимальной и минимальной
цифры равняется средней по величине цифре. Напишите программу, которая
определяет интересное число или нет. Если число интересное, следует вывести –
«Число интересное» иначе «Число неинтересное».

Формат входных данных
На вход программе подается целое трехзначное число.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.'''


# def check_number(num):

#     d1 = num % 1000 // 100
#     d2 = num % 100 // 10
#     d3 = num % 10 // 1

#     max1 = max(d1, d2, d3)
#     sum1 = (d1 + d2 + d3)

#     if max1 == sum1 / 2:
#         return 'Число интересное'
#     else:
#         return 'Число неинтересное'


# print(check_number(int(input())))


#  _____________________________________________________________________________


"""
Формат входных данных
На вход программе подается три вещественных числа a!= 0,b,c, каждое на
отдельной строке.

Формат выходных данных
Программа должна вывести вещественные корни уравнения если они существуют или
текст «Нет корней» в противном случае.

Примечание. Если уравнение имеет два корня, то следует вывести их в порядке
возрастания.
"""


# from math import sqrt
# a, b, c = float(input()), float(input()), float(input())
# discriminant = pow(b, 2) - 4 * a * c
# root0 = -b / (2 * a)
# root1 = (-b + discriminant ** 0.5) / (2 * a)
# root2 = (-b - discriminant ** 0.5) / (2 * a)
# if discriminant < 0:
#     print('Нет корней')
# elif discriminant == 0:
#     print(root0)
# else:
#     print(f'''{min(root1, root2)}
# {max(root1, root2)}''')


#  _____________________________________________________________________________


"""
Даны два целых числа m и n. Напишите программу, которая выводит все числа от m
до n включительно в порядке возрастания, если m < n, или в порядке убывания в
противном случае.

Формат входных данных
На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести числа в соответствии с условием задачи.
"""


# # soltion 1

# m = int(input())
# n = int(input())

# if m <= n:
#     for i in range(m, n + 1):
#         print(i)
# else:
#     for i in range(m, n - 1, -1):
#         print(i)

# # soltion 2

# m = int(input())
# n = int(input())
# k = n >= m and 1 or -1

# for i in range(m, n + k, k):
#     print(i)

# # soltion 3

# m = int(input())
# n = int(input())

# for i in range(m, n + 1) or range(m, n - 1, -1):
#     print(i)


#  _____________________________________________________________________________


'''
На вход программе подаются три целых числа a и b и n . Напишите программу,
которая подсчитывает количество чисел в диапазоне от 0 до 99 включительно,
степень n которых оканчивается на цифры от 0 до 9 включительно.

Вывод:

{0: 10, 1: 20, 2: 0, 3: 0, 4: 20, 5: 10, 6: 20, 7: 0, 8: 0, 9: 20} -
в степени 2
{0: 10, 1: 10, 2: 10, 3: 10, 4: 10, 5: 10, 6: 10, 7: 10, 8: 10, 9: 10} - в
степени 3
{0: 10, 1: 40, 2: 0, 3: 0, 4: 0, 5: 10, 6: 40, 7: 0, 8: 0, 9: 0} - в степени 4
'''

# for n in range(2, 5):
#     d = dict.fromkeys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0)
#     for i in range (10):
#         ld = i
#         counter = 0
#         for k in range(100):
#            if ld == k**n % 10:
#                 counter += 1
#         d[i] += counter
#     print(f'{d} - в степени {n}')
#     print()


#  _____________________________________________________________________________


"""
На вход программе подается натуральное число n, а затем n различных
натуральных чисел, каждое на отдельной строке. Напишите программу, которая
выводит наибольшее и второе наибольшее число последовательности.

Формат входных данных
На вход программе подаются натуральное число n ≥ 2, а затем n различных
натуральных чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести два наибольших числа, каждое на отдельной строке.
"""


# n = int(input())             # Получаем число n
# largest1 = 0                 # Превое наибольшее число
# largest2 = 0                 # Второе наибольшее, которое меньше первого
# for i in range(n):           # Реализуем цикл
#     num = int(input())       # Получаем число для сравнения
#     if num > largest1:     # Если полученное число больше Первого наибольшего
#         largest2 = largest1  # То Второе наибольшее получает значение Первого
#         largest1 = num       # А Первое получает значение полученного числа
#     elif num > largest2:  # Если же полученное число меньше или равно Первому
#         largest2 = num       # То его значение получает Второе
# print(largest1)              # Печатаем результат
# print(largest2)


#  _____________________________________________________________________________


"""
Напишите программу, которая считывает натуральное число n и выводит первые nn
чисел последовательности Фибоначчи.

Формат входных данных
На вход программе подается одно число n ≤ 100 – количество
членов последовательности.

Формат выходных данных
Программа должна вывести члены последовательности Фибоначчи, отделенные
символом пробела.
"""


# n = int(input())
# a = 0
# b = 1
# for i in range(n):
#     a, b = b, a + b
#     print(a, end=' ')


#  _____________________________________________________________________________


"""
Дано нечетное натуральное число n. Напишите программу, которая печатает
равнобедренный звездный треугольник с основанием, равным n в соответствии с
примером:

Sample Input:
5
Sample Output:
*
**
***
**
*
"""

# print()
# n = int(input())
# for i in range(1, n + 1):
#     if i <= n // 2 + 1:
#         print('*' * i)
#     else:
#         print('*' * (n - i + 1))


# # soltion 2


# print()
# # n = int(input())
# for i in range(1, n + 1):
#     k = ((i <= n // 2 + 1) and i or n - i + 1)
#     for _ in range(k):
#         print('*', end='')
#     print()


# # soltion 3


# print()
# # n = int(input())
# for i in range(1, n + 1):
#     print('*' * min(i, n + 1 - i))


#  _____________________________________________________________________________


"""                 Гипотеза Эйлера о сумме степеней 🌶️🌶️

В 1769 году Леонард Эйлер сформулировал обобщенную версию Великой теоремы
Ферма, предполагая, что по крайней мере n энных степеней необходимо для
получения суммы, которая сама является энной степенью для n > 2. Напишите
программу для опровержения гипотезы Эйлера (продержавшейся до 1967 года), и
найдите четыре положительных целых числа, сумма 5-х степеней которых равна 5-й
степени другого положительного целого числа.

Таким образом, найдите пять натуральных чисел a, b, c, d, e удовлетворяющих
условию:

a^5 + b^5 + c^5 + d^5 = e^5.

В ответе укажите сумму a + b + c + d + e.

Примечание 1. Используйте вложенный цикл for.

Примечание 2. Считайте, что числа a, b, c, d, e не превосходят 150.

Примечание 3. Программа может работать дольше чем обычно. В зависимости от
способа решения задачи на выполнение программы может уходить до нескольких
минут. Попробуйте сократить количество вложенных циклов.

"""

# from datetime import datetime
# start_time = datetime.now()


# # soltion 1


# def get_eyler1():
#     f_list = []
#     q = 0
#     for i in range(151):
#         q = i ** 5
#         f_list.append(q)
#     for a in f_list[1:]:
#         for b in f_list[f_list.index(a) + 1:]:
#             for c in f_list[f_list.index(b) + 1:]:
#                 for d in f_list[f_list.index(c) + 1:]:
#                     e = (a + b + c + d)
#                     if e in f_list:
#                         print(a, b, c, d, e)
#                         print(int(a ** 0.2), int(b ** 0.2), int(c ** 0.2),
#                               int(d ** 0.2), int(e ** 0.2))
#                         print(int(a ** 0.2 + b ** 0.2 + c ** 0.2 +
#                                   d ** 0.2 + e ** 0.2))
#                         return


# # soltion 2


# get_eyler1()
# print(datetime.now() - start_time)  # 9 sec.


# def get_eyler2():
#     for a in range(1, 151):
#         for b in range(150, a, -1):
#             for c in range(b + 1, 151):
#                 for d in range(150, c, -1):
#                     e = int((a ** 5 + b ** 5 + c ** 5 + d ** 5) ** 0.2)
#                     if e ** 5 == a ** 5 + b ** 5 + c ** 5 + d ** 5:
#                         print(a, b, c, d, e)
#                         print(a ** 5, b ** 5, c ** 5, d ** 5, e ** 5)
#                         print(a + b + c + d + e)
#                         return


# get_eyler2()
# print(datetime.now() - start_time)  # 22 sec


#  _____________________________________________________________________________


"""
    привет!
           /> - フ
          |  o  o|
         /`ミ _x 彡
        /        |
       /   ヽ　  ﾉ
    ／￣|   | | |
    | (￣ヽ__ヽ_)_)
    ＼二つ

На вход программе подается натуральное число n. Напишите программу, которая
находит цифровой корень данного числа. Цифровой корень числа nn получается
следующим образом: если сложить все цифры этого числа, затем все цифры
найденной суммы и повторить этот процесс, то в результате будет получено
однозначное число (цифра), которое и называется цифровым корнем данного числа.
Формат входных данных
На вход программе подается одно натуральное число.
Формат выходных данных
Программа должна вывести цифровой корень введенного числа.

Тестовые данные 🟢
Sample Input:
192
Sample Output:
3

"""

# n = int(input())
# d_root = n
# while d_root > 9:
#     sum_digits = 0
#     while d_root > 0:
#         sum_digits += d_root % 10
#         d_root = d_root // 10
#     d_root = sum_digits
# print(d_root)


# # soltion 2


# n = int(input())
# while n > 9:
#     n = n // 10 + n % 10
# print(n)


# # soltion 3


# n = int(input())
# d_root = n % 9 if n % 9 else 9
# print(d_root)


#  _____________________________________________________________________________


"""
                        k-ая буква слова 🌶️🌶️

На вход программе подается натуральное число n и n строк, а затем число k.
Напишите программу, которая выводит k-ую букву из введенных строк на одной
строке без пробелов.

Формат входных данных
На вход программе подается натуральное число n,  далее n строк, каждая на
отдельной строке. В конце вводится натуральное число k – номер буквы
(нумерация начинается с единицы).

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Если некоторые строки слишком короткие, и в них нет символа с
заданным номером, то такие строки при выводе нужно игнорировать.

Тестовые данные
Sample Input:
5
abcdef
bcdefg
cdefgh
defghi
efghij
2
Sample Output:
bcdef
"""

# n = int(input())
# my_list = [input() for _ in range(n)]
# k = int(input())
# result = ''
# for s in my_list:
#     result += s[k - 1:k]  # Использование среза позволяет обойтись без
# условий.
# print(result)

#  _____________________________________________________________________________


"""                 Google search - 2 🌶️🌶️
На вход программе подается натуральное число nn, затем nn строк, затем число kk
— количество поисковых запросов, затем kk строк — поисковые запросы. Напишите
программу, которая выводит все введенные строки, в которых встречаются все
поисковые запросы.

Формат входных данных
На вход программе подаются натуральное число nn — количество строк, затем сами
строки в указанном количестве, затем число kk, затем сами поисковые запросы.

Формат выходных данных
Программа должна вывести все введенные строки, в которых встречаются все
поисковые запросы.

Примечание. Поиск не должен быть чувствителен к регистру символов.

Тестовые данные 🟢
Sample Input:

5
Язык Python прекрасен
C# - отличный язык программирования
Stepik - отличная платформа
BEEGEEK FOREVER!
язык Python появился 20 февраля 1991
2
язык
python
Sample Output:

Язык Python прекрасен
язык Python появился 20 февраля 1991"""


# src_lst = [(input()) for _ in range(int(input()))]
# key_lst = [(input()).lower() for _ in range(int(input()))]
# res_lst = src_lst.copy()
# print(res_lst)
# for s in src_lst:
#     for k in key_lst:
#         if k not in s.lower():
#             res_lst.remove(s)
#             break
# print(*res_lst, sep='\n')


#  _____________________________________________________________________________


"""
                        Валидный номер 🌶️🌶️

На вход программе подается строка текста. Напишите программу, которая
определяет является ли введенная строка корректным телефонным номером.
Строка текста является корректным телефонным номером если она имеет формат:

abc-def-hijk или
7-abc-def-hijk
где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9.

Формат входных данных
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести «YES» если строка является корректным телефонным
номером и «NO» в противном случае.

Примечание. Телефонный номер должен содержать только цифры и символ -, а
количество цифр в каждой группе должны быть правильным.

Sample Input 1:
7-301-447-5820
Sample Output 1:
YES
Sample Input 2:
301-447-5820
Sample Output 2:
YES
Sample Input 3:
301-4477-5820
Sample Output 3:
NO
Sample Input 4:
3X1-447-5820
Sample Output 4:
NO
Sample Input 5:
3014475820
Sample Output 5:
NO

"""


# def number_is_valid(str):
#     lst = [g for g in str.split('-')]
#     if lst[0] == '7':
#         lst = lst[1:]
#     if len(lst) != 3:
#         return 'NO'
#     elif len(lst[0]) != 3 or len(lst[1]) != 3 or len(lst[2]) != 4:
#         return 'NO'
#     elif not lst[0].isdigit() or not lst[1].isdigit() or not lst[2].isdigit():
#         return 'NO'
#     else:
#         return 'YES'


# print(number_is_valid(input()))


#  _____________________________________________________________________________


"""
                            Merge two sorted lists
Напишите функцию merge(list1, list2), которая принимает в качестве аргументов
два отсортированных по возрастанию списка, состоящих из целых чисел, и
объединяет их в один отсортированный список.
Примечание 1. Списки list1 и list2 могут иметь разную длину.
Примечание 2. Можно использовать списочный метод sort(), а можно обойтись
и без него.
Следующий программный код:
print(merge([1, 2, 3], [5, 6, 7, 8]))
print(merge([1, 7, 10, 16], [5, 6, 13, 20]))

должен выводить:
[1, 2, 3, 5, 6, 7, 8]
[1, 5, 6, 7, 10, 13, 16, 20]
"""
# Сортировка слиянием
# Решение объединения и сортировки отсортированных списков в один проход
# Работает очень быстро. Сравнимо с встоенной функцией sorted()
# Первая фунция объединяет два списка. Вторая, используя первую, объединяет
# любое количество списков:

# def merge_two_lists(list1, list2):
#     merged_list = []
#     i1, i2, = 0, 0
#     len1, len2 = len(list1), len(list2)
#     while i1 < len1 and i2 < len2:
#         if list1[i1] < list2[i2]:
#             merged_list.append(list1[i1])
#             i1 += 1
#         else:
#             merged_list.append(list2[i2])
#             i2 += 1
#     merged_list += list1[i1:] + list2[i2:]
#     return merged_list


# def merge_multiple_lists():
#     merged_list = []
#     for _ in range(int(input())):
#         current_list = [int(s) for s in input().split()]
#         merged_list = merge_two_lists(current_list, merged_list)
#     return merged_list


#  _____________________________________________________________________________


""" https://stepik.org/lesson/334150/step/4

                            Next Prime 🌶️🌶️
Напишите функцию get_next_prime(num), которая принимает в качестве аргумента
натуральное число num и возвращает первое простое число большее числа num.
"""


# def is_prime(num):
#     if num == 1:
#         return False
#     for i in range(2, int(num ** 0.5) + 1):
#         if num % i == 0:
#             return False
#     return True


# def get_next_prime(num):  # Вариант с циклом
#     ""
#     result = num + 1
#     while not is_prime(result):
#         result += 1
#     return result


# def get_next_prime(num):  # Вариант с рекурсией
#     ""
#     result = num + 1
#     if is_prime(result):
#         return result
#     else:
#         return get_next_prime(result)


#  _____________________________________________________________________________


""" https://stepik.org/lesson/334150/step/5
                            Good password 🌶️
Напишите функцию is_password_good(password), которая принимает в качестве
аргумента строковое значение пароля password и возвращает значение True если
пароль является надежным и False в противном случае.

Пароль является надежным если:
он состоит из цифр, заглавных и строчных букв
его длина не менее 8 символов;
он содержит как минимум одну заглавную букву (верхний регистр);
он содержит как минимум одну строчную букву (нижний регистр);
он содержит хотя бы одну цифру.

Тестовые данные:
1	aaAA12qqp	    True
2	aa13AN	        False
3	aaaaaaaaaaaaa	False
4	AAAAAAAAAAA	    False
5	734638763978653	False
6	AAPPqq9S	    True
7	AABBccssss	    False
8	AA23423423	    False
9	dsas233232232	False
10	99yyPPgg	    True
11	99yyPPg	        False
12	()+_№;%:	    False
13	aaaaaaA@	    False
14  aabbCC11OP      True
15  abC1pu          False
"""


# def is_password_good(password: str) -> bool:
#     "this function checks the strength of the entered password"
#     if (len(password) < 8 or not
#             password.isalnum() or
#             password.isalpha() or
#             password.isdigit() or
#             password.islower() or
#             password.isupper()):
#         return False
#     else:
#         return True


#  _____________________________________________________________________________



""" https://stepik.org/lesson/334150/step/7
                            Палиндром 🌶️
Напишите функцию is_palindrome(text), которая принимает в качестве аргумента
строку text и возвращает значение True если указанный текст является
палиндромом и False в противном случае.

При проверке считайте большие и маленькие буквы одинаковыми,
а также игнорируйте пробелы, а также символы , . ! ? -.

Тестовые данные
1	Standart - smallest, sell Amstrad nats.	                                True
2	Zoo belt to be Russia, is sure bottle booz.	                            True
3	Evil fit some kill like me, kill like most, if live.	                True
4	Do me?.. Kill I victim? Must summit civil like mod.	                    True
5	Карман, жена, но Какашкин - вор! О, Ковалева... Вела во коровник.
    Ша! Как она нежна! рак...	                                           False
6	Зело полз Антипарх то вино пить - тип он и вот храпит - на зло полез	True
7	Марс близ Овна. На базар генерал в ларе негра за банан возил б. Срам!	True
8	Тер жен, а нес токмо радение о бодром мордобое, и недаром кот сена
    не жрет.	                                                            True
9	Тер жен, а нес токмо недаром кот сена не жрет.	                       False
10	sjdflksjflksdjflsdjk sdlfhsdjfE#R#$$#R !!!!! sdjfnsdjkfnsd
 kjcvadsk	                                                               False
"""


# def ordering_text(text):  # Variant 1
#     return (text.lower().replace(' ', '').replace(',', '')
#                         .replace('.', '').replace('!', '')
#                         .replace('?', '').replace('-', ''))


# def ordering_text(text):  # Variant 2
#     return ''.join([c.lower() for c in text if c not in ' ,.!?-'])


# def is_palindrome(text):
#     return ordering_text(text) == ordering_text(text)[::-1]


#  _____________________________________________________________________________


""" https://stepik.org/lesson/334150/step/9
                Правильная скобочная последовательность 🌶️
Напишите функцию is_correct_bracket(text), которая принимает в качестве
аргумента непустую строку text, состоящую из символов '(' и ')' и возвращает
значение True если поступившая на вход строка является правильной скобочной
последовательностью и False в противном случае.
Правильной скобочной последовательностью называется строка,
состоящая только из символов '(' и ')', где каждой открывающей скобке
найдется парная закрывающая скобка.
"""

# Variant 1


def is_correct_bracket0(text: str):
    counter = 0
    for c in text:
        if c == '(':
            counter += 1
        else:
            counter -= 1
        if counter < 0:
            return False
    return not counter

# Variant 2


def is_correct_bracket(text: str):
    string = text
    while "()" in string:
        string = string.replace('()', '')
    return not string


#  _____________________________________________________________________________

"""
Напишите функцию convert_to_python_case(text), которая принимает в качестве
аргумента строку в «верблюжьем регистре» и преобразует его в «змеиный регистр».
"""


def convert_to_python_case(text: str):
    result = text[0].lower()
    for c in text[1:]:
        result += '_' + c.lower() if c.lower() else c
    return result


#  _____________________________________________________________________________
